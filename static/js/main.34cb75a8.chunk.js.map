{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","response","json","data","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAiEA,SAASA,EAATC,GAAsC,IAAfC,EAAeD,EAAfC,OAAQC,EAAOF,EAAPE,IAC7B,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAG3D,SAASC,EAATC,GAA+B,IAATC,EAASD,EAATC,MACpB,OAAOR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,GAmB1BC,MAnDf,SAAAC,GAAoD,IAAnCN,EAAmCM,EAAnCN,MAAON,EAA4BY,EAA5BZ,OAAQa,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,SACtC,OACEZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEpCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACZM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OACVd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAGnCd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACbL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEgB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCsGLC,6MA7DbC,MAAQ,KAMRC,cAAgB,WAcd,OAZeC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GAEnC,OACE3B,EAAAC,EAAAC,cAAC0B,EAAD,CACExB,MAAOuB,EAAME,cACb/B,OAAQ6B,EAAMG,mBACdf,IAAKY,EAAMI,GACXpB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAOxBoB,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUb,EAAKc,WADf,OACLb,EADKU,EAAAI,KAEXf,EAAKgB,SAAS,CACZf,WAHS,wBAAAU,EAAAM,SAAAT,EAAAU,WAObJ,SAAW,WACT,OAAOK,MACL,iEAECC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKtB,SACvBuB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFAjC5BP,KAAKX,8CAoCE,IACCN,EAAWiB,KAAKpB,MAAhBG,OACR,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,gBAC9BA,EAASiB,KAAKnB,gBAAkB,kBAvGvB6B,aC1BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.34cb75a8.chunk.js","sourcesContent":["// eslint-disable-next-line\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis';\nimport './Movie.css';\n\n// 부모 컴포넌트가 자식 컴포넌트에게 정보를 줌\n// class Movie extends Component {\n//   // 받는 정보의 type 체크 무엇을 받는지, isRequried는 필수 조건\n//   static propTypes = {\n//     title: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired\n//   };\n\n//   render() {\n//     console.log(this.props); // Movie.js에서 title을 props로 불러옴! 왜냐고 movie컴포넌트는 title이라는 요소가 있음\n//     return (\n//       <div>\n//         <MoviePoster poster={this.props.poster} />\n//         <h1>{this.props.title}</h1>\n//         {/* 요소들을 액세스하는 방법은 this.props.title */}\n//       </div>\n//     );\n//   }\n// }\n\n// class MoviePoster extends Component {\n//   static propTypes = {\n//     poster: PropTypes.string.isRequired\n//   };\n//   render() {\n//     console.log(this.props);\n//     return <img src={this.props.poster} alt=\"Movie Poster\" />;\n//   }\n// }\n\n// 그냥 return을 하기 위해 존재하기도 하는 어떤 컴포넌트 - Functional Component\n// class component는 state 존재, functional은 state 없음\nfunction Movie({ title, poster, genres, synopsis }) {\n  return (\n    <div className=\"Movie\">\n      <div className=\"Movie__Column\">\n        <MoviePoster poster={poster} alt={title} />\n      </div>\n      <div className=\"Movie__Column\">\n        <h1>{title}</h1>\n        <div className=\"Movie__Genres\">\n          {genres.map((genre, index) => (\n            <MovieGenre genre={genre} key={index} />\n          ))}\n        </div>\n        <div className=\"Movie__Synopsis\">\n          <LinesEllipsis\n            text={synopsis}\n            maxLine=\"3\"\n            ellipsis=\"...\"\n            trimRight\n            basedOn=\"letters\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction MoviePoster({ poster, alt }) {\n  return <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />;\n}\n\nfunction MovieGenre({ genre }) {\n  return <span className=\"Movie__Genre\">{genre}</span>;\n}\n\nMovie.propTypes = {\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  gernes: PropTypes.array,\n  synopsis: PropTypes.string.isRequired\n};\n\nMoviePoster.propTypes = {\n  poster: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired\n};\n\nMovieGenre.propTypes = {\n  genre: PropTypes.string.isRequired\n};\n\nexport default Movie;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n// 메인 컴포넌트가 전체 정보를 가지고 있고 각기 칠드런에게 전달 해줌, 한 개의 데이터 소스를 가지고 각 컴포넌트별로 출력만 하면 됨, UI구축에 좋음~\n// const movieTitles = ['Matrix', 'Full Metal Jacket', 'Oldboy', 'Star Wars'];\n\n// const movieImages = [\n//   'https://m.media-amazon.com/images/M/MV5BNzQzOTk3OTAtNDQ0Zi00ZTVkLWI0MTEtMDllZjNkYzNjNTc4L2ltYWdlXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SY1000_CR0,0,665,1000_AL_.jpg',\n//   'https://pics.filmaffinity.com/Nacido_para_matar-577943737-large.jpg',\n//   'https://upload.wikimedia.org/wikipedia/en/thumb/6/67/Oldboykoreanposter.jpg/220px-Oldboykoreanposter.jpg',\n//   'https://imgix.ranker.com/user_node_img/50076/1001511915/original/the-very-first-_star-war_-poster-photo-u1?w=650&q=50&fm=jpg&fit=crop&crop=faces'\n// ];\n\n// 정렬하고 싶으니까\n// const movies = [\n//   {\n//     title: 'Matrix',\n//     poster:\n//       'https://m.media-amazon.com/images/M/MV5BNzQzOTk3OTAtNDQ0Zi00ZTVkLWI0MTEtMDllZjNkYzNjNTc4L2ltYWdlXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SY1000_CR0,0,665,1000_AL_.jpg'\n//   },\n//   {\n//     title: 'Full Metal Jacket',\n//     poster:\n//       'https://pics.filmaffinity.com/Nacido_para_matar-577943737-large.jpg'\n//   },\n//   {\n//     title: 'Oldboy',\n//     poster:\n//       'https://upload.wikimedia.org/wikipedia/en/thumb/6/67/Oldboykoreanposter.jpg/220px-Oldboykoreanposter.jpg'\n//   },\n//   {\n//     title: 'Star Wars',\n//     poster:\n//       'https://imgix.ranker.com/user_node_img/50076/1001511915/original/the-very-first-_star-war_-poster-photo-u1?w=650&q=50&fm=jpg&fit=crop&crop=faces'\n//   }\n// ];\n\nclass App extends Component {\n  // component livecycle is Order\n  // Render: componentWillMount() -> render() -> componentDidMount()\n  // Update: componentWillReceiveProps() -> shouldComponentUpdate() == true -> componentWillUpdate() -> render() -> componentDidUpdate()\n\n  // state: 컴포넌트 안에 있는 오브젝트, state가 바뀔 때마다, 렌더 발생\n  // state = {\n  //   greeting: 'Hello!',\n  //   movies: [\n  //     {\n  //       title: 'Matrix',\n  //       poster:\n  //         'https://m.media-amazon.com/images/M/MV5BNzQzOTk3OTAtNDQ0Zi00ZTVkLWI0MTEtMDllZjNkYzNjNTc4L2ltYWdlXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SY1000_CR0,0,665,1000_AL_.jpg'\n  //     },\n  //     {\n  //       title: 'Full Metal Jacket',\n  //       poster:\n  //         'https://pics.filmaffinity.com/Nacido_para_matar-577943737-large.jpg'\n  //     },\n  //     {\n  //       title: 'Oldboy',\n  //       poster:\n  //         'https://upload.wikimedia.org/wikipedia/en/thumb/6/67/Oldboykoreanposter.jpg/220px-Oldboykoreanposter.jpg'\n  //     },\n  //     {\n  //       title: 'Star Wars',\n  //       poster:\n  //         'https://imgix.ranker.com/user_node_img/50076/1001511915/original/the-very-first-_star-war_-poster-photo-u1?w=650&q=50&fm=jpg&fit=crop&crop=faces'\n  //     },\n  //     {\n  //       title: 'Transpotting',\n  //       poster: 'http://media.tumblr.com/tumblr_ln4tv7uzKx1qhqg0d.jpg'\n  //     }\n  //   ]\n  // };\n\n  // 컴포넌트가 마운트될때마다 직접 state 변경하면 설정한 render 설정들 작동 안함\n  // componentDidMount() {\n  //   setTimeout(() => {\n  //     this.setState({\n  //       greeting: 'Hello again!'\n  //     });\n  //   }, 3000);\n  //   console.log('did mount');\n  // }\n  // componentDidMount() {\n  //   setTimeout(() => {\n  //     this.setState({\n  //       movies: [\n  //         {\n  //           title: 'Transpotting',\n  //           poster: 'http://media.tumblr.com/tumblr_ln4tv7uzKx1qhqg0d.jpg'\n  //         },\n  //         ...this.state.movies\n  //       ]\n  //     });\n  //     console.log('asdf');\n  //   }, 2000);\n  // }\n\n  state = {};\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    // 변수 movies에 데이터 저장\n    const movies = this.state.movies.map(movie => {\n      //console.log(movie);\n      return (\n        <Movie\n          title={movie.title_english}\n          poster={movie.medium_cover_image}\n          key={movie.id}\n          genres={movie.genres}\n          synopsis={movie.synopsis}\n        />\n      );\n    });\n    return movies;\n  };\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    });\n  };\n\n  _callApi = () => {\n    return fetch(\n      'https://yts.am/api/v2/list_movies.json?sort_by=download_count'\n    )\n      .then(response => response.json()) // json으로 변환\n      .then(json => json.data.movies)\n      .catch(err => console.log(err));\n  };\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? 'App' : 'App--loading'}>\n        {movies ? this._renderMovies() : 'Loading'}\n        {/* {this.state.greeting} */}\n        {/* Movie 컴포넌트는 title 가지고 있음 */}\n        {/* <Movie title={movieTitles[0]} poster={movieImages[0]} />\n        <Movie title={movieTitles[1]} poster={movieImages[1]} />\n        <Movie title={movieTitles[2]} poster={movieImages[2]} />\n\t\t\t\t<Movie title={movieTitles[3]} poster={movieImages[3]} /> */}\n        {/* index는 현재 재공하는 리스트의 숫자,  엘리먼트가 많을 경우 고유 key를 줘야함 */}\n        {/* {this.state.movies.map((movie, index) => {\n          return (\n            <Movie title={movie.title} poster={movie.poster} key={index} />\n          );\n\t\t\t\t})} */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}